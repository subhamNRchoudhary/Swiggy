Taken from ChatGPT

### 1. **Count of customers who have not placed any orders:**
   ```sql
   SELECT COUNT(*)
   FROM Users u
   LEFT JOIN Orders o ON u.UserID = o.UserID
   WHERE o.OrderID IS NULL;
   ```

### 2. **Average price of each food type:**
   ```sql
   SELECT f.FoodType, AVG(m.Price) AS AvgPrice
   FROM Food f
   JOIN Menu m ON f.FoodID = m.FoodID
   GROUP BY f.FoodType;
   ```

### 3. **Average price of food for each restaurant:**
   ```sql
   SELECT r.RestaurantName, AVG(m.Price) AS AvgFoodPrice
   FROM Restaurants r
   JOIN Menu m ON r.RestaurantID = m.RestaurantID
   GROUP BY r.RestaurantName;
   ```

### 4. **Top restaurant in terms of the number of orders for all months:**
   ```sql
   SELECT r.RestaurantName, COUNT(o.OrderID) AS TotalOrders
   FROM Orders o
   JOIN Restaurants r ON o.RestaurantID = r.RestaurantID
   GROUP BY r.RestaurantName
   ORDER BY TotalOrders DESC
   LIMIT 1;
   ```

### 5. **Top restaurant in terms of the number of orders for the month of June:**
   ```sql
   SELECT r.RestaurantName, COUNT(o.OrderID) AS TotalOrders
   FROM Orders o
   JOIN Restaurants r ON o.RestaurantID = r.RestaurantID
   WHERE MONTH(o.OrderDate) = 6
   GROUP BY r.RestaurantName
   ORDER BY TotalOrders DESC
   LIMIT 1;
   ```

### 6. **Restaurants with monthly revenue greater than a given value (`given_value`):**
   ```sql
   SELECT r.RestaurantName, SUM(od.Price) AS MonthlyRevenue
   FROM Orders o
   JOIN Order_Details od ON o.OrderID = od.OrderID
   JOIN Restaurants r ON o.RestaurantID = r.RestaurantID
   WHERE MONTH(o.OrderDate) = [your_month]
   GROUP BY r.RestaurantName
   HAVING MonthlyRevenue > given_value;
   ```

### 7. **Show all orders with order details for a particular customer in a particular date range:**
   ```sql
   SELECT o.OrderID, o.OrderDate, od.FoodID, od.Quantity, od.Price
   FROM Orders o
   JOIN Order_Details od ON o.OrderID = od.OrderID
   WHERE o.UserID = [customer_id]
   AND o.OrderDate BETWEEN [start_date] AND [end_date];
   ```

### 8. **Restaurant with the highest number of repeat customers:**
   ```sql
   SELECT r.RestaurantName, COUNT(DISTINCT o.UserID) AS RepeatCustomers
   FROM Orders o
   JOIN Restaurants r ON o.RestaurantID = r.RestaurantID
   GROUP BY r.RestaurantName
   ORDER BY RepeatCustomers DESC
   LIMIT 1;
   ```

### 9. **Month-over-month revenue growth of Swiggy:**
   ```sql
   SELECT 
       DATE_FORMAT(OrderDate, '%Y-%m') AS Month, 
       SUM(od.Price) AS Revenue,
       (SUM(od.Price) - LAG(SUM(od.Price)) OVER (ORDER BY DATE_FORMAT(OrderDate, '%Y-%m'))) / LAG(SUM(od.Price)) OVER (ORDER BY DATE_FORMAT(OrderDate, '%Y-%m')) * 100 AS MoM_Growth
   FROM Orders o
   JOIN Order_Details od ON o.OrderID = od.OrderID
   GROUP BY DATE_FORMAT(OrderDate, '%Y-%m');
   ```

### 10. **Top 3 ordered dishes:**
   ```sql
   SELECT f.FoodName, COUNT(od.FoodID) AS OrderCount
   FROM Order_Details od
   JOIN Food f ON od.FoodID = f.FoodID
   GROUP BY f.FoodName
   ORDER BY OrderCount DESC
   LIMIT 3;
   ```

### 11. **Month-over-month revenue growth of each restaurant:**
   ```sql
   SELECT 
       r.RestaurantName, 
       DATE_FORMAT(o.OrderDate, '%Y-%m') AS Month, 
       SUM(od.Price) AS Revenue,
       (SUM(od.Price) - LAG(SUM(od.Price)) OVER (PARTITION BY r.RestaurantID ORDER BY DATE_FORMAT(o.OrderDate, '%Y-%m'))) / LAG(SUM(od.Price)) OVER (PARTITION BY r.RestaurantID ORDER BY DATE_FORMAT(o.OrderDate, '%Y-%m')) * 100 AS MoM_Growth
   FROM Orders o
   JOIN Order_Details od ON o.OrderID = od.OrderID
   JOIN Restaurants r ON o.RestaurantID = r.RestaurantID
   GROUP BY r.RestaurantName, DATE_FORMAT(o.OrderDate, '%Y-%m');
   ```

### 12. **Overall revenue generated by the platform during a specific time period:**
   ```sql
   SELECT SUM(od.Price) AS TotalRevenue
   FROM Orders o
   JOIN Order_Details od ON o.OrderID = od.OrderID
   WHERE o.OrderDate BETWEEN [start_date] AND [end_date];
   ```

### 13. **Average order value per user:**
   ```sql
   SELECT u.UserID, AVG(o.TotalAmount) AS AvgOrderValue
   FROM Users u
   JOIN Orders o ON u.UserID = o.UserID
   GROUP BY u.UserID;
   ```

### 14. **Average delivery time for each restaurant, and how does it affect customer satisfaction:**
   ```sql
   SELECT 
       r.RestaurantName, 
       AVG(TIMESTAMPDIFF(MINUTE, o.OrderTime, o.DeliveryTime)) AS AvgDeliveryTime, 
       AVG(o.Rating) AS AvgRating
   FROM Orders o
   JOIN Restaurants r ON o.RestaurantID = r.RestaurantID
   GROUP BY r.RestaurantName;
   ```

### 15. **Average rating for each restaurant and delivery partner:**
   ```sql
   SELECT 
       r.RestaurantName, 
       AVG(o.RestaurantRating) AS AvgRestaurantRating,
       dp.DeliveryPartnerName,
       AVG(o.DeliveryPartnerRating) AS AvgDeliveryPartnerRating
   FROM Orders o
   JOIN Restaurants r ON o.RestaurantID = r.RestaurantID
   JOIN Delivery_Partner dp ON o.DeliveryPartnerID = dp.DeliveryPartnerID
   GROUP BY r.RestaurantName, dp.DeliveryPartnerName;
   ```

### 16. **How do the ratings for restaurants and delivery partners correlate with customer retention:**
   ```sql
   SELECT 
       r.RestaurantName,
       dp.DeliveryPartnerName,
       AVG(o.RestaurantRating) AS AvgRestaurantRating,
       AVG(o.DeliveryPartnerRating) AS AvgDeliveryPartnerRating,
       COUNT(DISTINCT o.UserID) AS RepeatCustomers
   FROM Orders o
   JOIN Restaurants r ON o.RestaurantID = r.RestaurantID
   JOIN Delivery_Partner dp ON o.DeliveryPartnerID = dp.DeliveryPartnerID
   GROUP BY r.RestaurantName, dp.DeliveryPartnerName
   HAVING RepeatCustomers > 1;
   ```

### 17. **Which days and times see the highest order volume, and are there any patterns in user behavior:**
   ```sql
   SELECT 
       DAYNAME(o.OrderDate) AS DayOfWeek, 
       HOUR(o.OrderTime) AS HourOfDay, 
       COUNT(o.OrderID) AS OrderVolume
   FROM Orders o
   GROUP BY DayOfWeek, HourOfDay
   ORDER BY OrderVolume DESC;
   ```

### 18. **Count of orders delivered by each delivery partner and their average delivery rating:**
   ```sql
   SELECT 
       dp.DeliveryPartnerName, 
       COUNT(o.OrderID) AS TotalOrders, 
       AVG(o.DeliveryPartnerRating) AS AvgDeliveryRating
   FROM Orders o
   JOIN Delivery_Partner dp ON o.DeliveryPartnerID = dp.DeliveryPartnerID
   GROUP BY dp.DeliveryPartnerName;
   ```

### 19. **Distribution of delivery partners in the `Delivery_Partner` table:**
   ```sql
   SELECT dp.DeliveryPartnerName, COUNT(*) AS PartnerCount
   FROM Delivery_Partner dp
   GROUP BY dp.DeliveryPartnerName;
   ```

